(()=>{"use strict";var e={n:r=>{var t=r&&r.__esModule?()=>r.default:()=>r;return e.d(t,{a:t}),t},d:(r,t)=>{for(var n in t)e.o(t,n)&&!e.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r)};const r=require("express");var t=e.n(r);const n=require("cors");var o=e.n(n);const i=require("helmet");var s=e.n(i);require("morgan");require("fs");const a=require("path");var c=e.n(a);const u=require("express-session");var l=e.n(u);const p=require("dotenv");var d=process.env,f=d.REDIS_PORT,v=void 0===f?6379:f,h=d.REDIS_HOST,O=void 0===h?"redis":h,S=d.REDIS_PASSWORD,b={port:+v,host:O,password:void 0===S?"secret":S},y=process.env,g=y.POSTGRESQL_USER,w=void 0===g?"admin":g,P=y.POSTGRESQL_PASSWORD,E=void 0===P?"admin":P,j=y.POSTGRESQL_PORT,R=void 0===j?"5432":j,m=y.POSTGRESQL_HOST,T=void 0===m?"localhost":m,_=process.env.DATABASE_URL,q=(void 0===_&&"postgres://".concat(w,":").concat(E,"@").concat(T,":").concat(R),process.env),D=q.SESSION_SECRET,M=void 0===D?"secret":D,k=q.SESSION_NAME,A=void 0===k?"sid":k,I=q.SESSION_TIMEOUT,x={secret:M,name:A,cookie:{maxAge:+(void 0===I?216e5:I),secure:!0},resave:!1,saveUninitialized:!1,rolling:!0},C=process.env,L=C.PORT;(0,p.config)();const G=require("ioredis");var N=e.n(G);const Q=require("connect-redis");var U=e.n(Q);function z(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}const H=function(){function e(){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this.RedisStore=U()(l()),this.redisClient=new(N())(b),this.redisClient.on("error",(function(){throw"Error connecting with redis client"}))}var r,t,n;return r=e,(t=[{key:"redisStore",get:function(){return new this.RedisStore({client:this.redisClient})}}])&&z(r.prototype,t),n&&z(r,n),Object.defineProperty(r,"prototype",{writable:!1}),e}();function B(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function W(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?B(Object(t),!0).forEach((function(r){J(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):B(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function F(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function J(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}(new(function(){function e(){var r=this;!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),J(this,"logPath",c().join(__dirname,"..","logs","access.log")),J(this,"handleMiscRoutes",(function(){r.app.get("/",(function(e,r){r.status(200).json({error:null,data:{server:"Base-Healthy"}})})),r.app.all("*",(function(e,r){r.status(404).json({error:"Requested route doesn't exist - 404",data:null})}))})),J(this,"configureExpressSessionMiddleware",(function(){r.app.use(l()(W(W({},x),{},{store:r.redisStore})))})),this.app=t()(),this.port=+L||4e3,this.redisStore=(new H).redisStore,this.initializeMiddlewares(),this.handleMiscRoutes(),this.configureExpressSessionMiddleware()}var r,n,i;return r=e,(n=[{key:"listen",value:function(){var e=this;this.app.listen(this.port,(function(){console.log("Server is up on the port: ".concat(e.port))}))}},{key:"initializeMiddlewares",value:function(){this.app.use(o()()),this.app.use(t().json()),this.app.use(s()())}}])&&F(r.prototype,n),i&&F(r,i),Object.defineProperty(r,"prototype",{writable:!1}),e}())).listen()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,